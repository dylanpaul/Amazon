-- Feel free to modify this file to match your development goal.
-- Here we only create 3 tables for demo purpose.

CREATE TABLE Users
(id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL, -- copied this 'generated by default structure from the skeleton code, unsure of exact functionality
email VARCHAR(256) NOT NULL UNIQUE,
password VARCHAR(256) NOT NULL,
first_name VARCHAR(256) NOT NULL,
last_name VARCHAR(256) NOT NULL
balance FLOAT NOT NULL  CHECK (balance >= 0) -- can balance be null?
);

CREATE TABLE Seller(
id INT PRIMARY KEY NOT NULL
FOREIGN KEY(id) REFERENCES Users(id)
);

CREATE TABLE Products
(name VARCHAR(256)  NOT NULL, 
seller_id INT NOT NULL
FOREIGN KEY(seller_id) REFERENCES Seller(id),
description VARCHAR(512),
category VARCHAR(256),
inventory  INT NOT NULL.
price FLOAT NOT NULL,
coupon code VARCHAR(32)  NOT NULL,
REFERENCES Coupon(code), 
PRIMARY KEY (name, seller_id)
);

CREATE TABLE Coupons
(code VARCHAR(32) NOT NULL PRIMARY KEY,
percent_off FLOAT NOT NULL
);

CREATE TABLE Purchases
(order_id INT NOT NULL,
product_name VARCHAR(256) 
FOREIGN KEY(product_name) REFERENCES Product(name),
seller_ID INT NOT NULL
FOREIGN KEY(seller_id) REFERENCES Seller(id),
buyer_id INT NOT NULL,
FOREIGN KEY buyer_id REFERENCES Users(id),
time_purchased timestamp without time zone NOT NULL DEFAULT (current_timestamp AT TIME ZONE 'UTC'),
quantity INT NOT NULL,
fulfilled_status  BOOLEAN NOT NULL,
PRIMARY KEY (order_id, product_name, seller_id),
FOREIGN KEY(product_name, seller_ID) REFERENCES Products(name, seller_id)
);

CREATE TABLE Seller_Reviews
(user_id INT NOT NULL,
seller_id INT NOT NULL,
time_reviewed timestamp without time zone NOT NULL DEFAULT (current_timestamp AT TIME ZONE 'UTC'),
rating INT NOT NULL CHECK(rating IN(0, 1, 2, 3, 4, 5)), -- can you submit a review description without a rating? In that case, this could be NULL
desc VARCHAR(512) NOT NULL,
PRIMARY KEY(user_id, seller_id),
);

CREATE TABLE Product_Reviews
(user_id INT NOT NULL,
seller_id INT NOT NULL,
time_reviewed timestamp without time zone NOT NULL DEFAULT (current_timestamp AT TIME ZONE 'UTC'),
product_name VARCHAR(256) NOT NULL, 
rating INTEGER NOT NULL CHECK(rating IN(0, 1, 2, 3, 4, 5)),
desc VARCHAR(512) NOT NULL, 
PRIMARY KEY(user_id, seller_id, product_name),
);

CREATE TABLE Cart_Items
user_id INT NOT NULL
FOREIGN KEY(user_id) REFERENCES Users(id),
product_name VARCHAR(256),
seller_id INT NOT NULL,
quantity INT NOT NULL,
coupon_code INT,
PRIMARY KEY(user_ID, product_name, seller_id),
FOREIGN KEY(product_name, seller_id) REFERENCES Products(product_name, seller_id),
CHECK (quantity > 0) -- we want to check if the Cart_Items(quantity) <= Products(inventory), but this check should occur at the time of the purchase
);

-- Triggers in Draft 
-- Triggers are commented out so they do not negatively effect inserts
/*
CREATE FUNCTION Trig_Balance() RETURNS TRIGGER AS $trig_bal$
BEGIN
  IF NEW.balance IN
  SELECT (OLD.balance - NEW.balance < 0)
  FROM User
  WHERE NEW.user_id = user_id
 THEN
     RAISE EXCEPTION 'You can not withdraw more money than you have';

END IF;
  RETURN NEW;
END;
$trig bal$ LANGUAGE plpgsql;

CREATE TRIGGER Trig_Balance
  BEFORE INSERT OR UPDATE ON User
  FOR EACH ROW
  EXECUTE PROCEDURE Trig_Balance();

CREATE FUNCTION Avg_Rating() RETURNS TRIGGER AS $avg_rating$
BEGIN
  IF 

END IF;
  RETURN NEW;
END;
$avg_rating$ LANGUAGE plpgsql;

CREATE TRIGGER Avg_Rating
  BEFORE INSERT OR UPDATE ON Product_Rating
  FOR EACH ROW
  EXECUTE PROCEDURE TAvg_Rating() ;


CREATE FUNCTION product_exists() RETURNS TRIGGER AS $$
BEGIN 
	IF EXISTS
		(
SELECT * 
FROM Products 
WHERE New.name = name AND New.seller_id = seller_id
		)
	THEN
		RAISE EXCEPTION “This product is already sold by this seller.”;
	END IF;

	RETURN NEW;
	
END;

	$$ LANGUAGE plpgsql;

CREATE TRIGGER product_exists
	BEFORE INSERT ON Products
	FOR EACH ROW
	EXECUTE PROCEDURE product_exists();



CREATE FUNCTION purchase_added() RETURNS TRIGGER AS $$
BEGIN 
	IF 
		(
			(New.price*New.quantity) > (Select balance
 From Users 
Where New.buyer_id = id)
		)
	THEN
		RAISE EXCEPTION “Not enough money for this”
	ESIF 
		(
			New.quantity > 	(Select inventory 
From Products 
Where New.product_name = Products.name AND New.seller_id = Products.seller_id)
		)
	THEN
		RAISE EXCEPTION “Not enough of this item remaining in stock”
	
	END IF;

	UPDATE Users SET balance = balance - (New.price*New.quantity) WHERE id = New.buyer_id ;
	UPDATE  Products SET inventory = inventory - (New.quantity) WHERE New.product_name = Products.name AND New.seller_id = Products.seller_id);
	
END;

	$$ LANGUAGE plpgsql;


CREATE TRIGGER purchase_added()
	BEFORE INSERT ON Purchase
	FOR EACH ROW
	EXECUTE PROCEDURE product_exists();
*/
